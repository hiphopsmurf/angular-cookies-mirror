!function(){angular.module("cookiesMirror",[])}(),function(){function r(r){function n(r,n){return{request:function(o){var e=n.get(!0);return""!==e&&(o.headers.Cookie=e),r.when(o)},requestError:function(n){return r.reject(n)},response:function(o){return n.parse(o.headers("set-cookie")),r.when(o)},responseError:function(n){return r.reject(n)}}}n.$inject=["$q","$cookiesMirror"],r.interceptors.push(n)}r.$inject=["$httpProvider"],angular.module("cookiesMirror").config(r)}(),function(){function r(){function r(){function r(r){if(t(),r){var n="";return angular.forEach(e,function(r,o){""!==r&&(n+=o+"="+r+"; ")}),n}return e}function n(r){if(r){var n=void 0;angular.forEach(e,function(o,t){r.indexOf(t+"=")>-1&&(n=r.split(t+"="),n.forEach(function(r){""!=r&&(e[t]=r.split(";")[0],e[t].indexOf("deleted")>-1&&(e[t]=""))}),n=void 0)}),i()}}return{get:r,parse:n}}var n="cookiesMirror",o=[],e={},t=function(){var r=window.localStorage.getItem(n)||"{}";e=JSON.parse(r)},i=function(){window.localStorage.setItem(n,JSON.stringify(e))};this.track=function(){t(),o=1===arguments.length&&arguments[0]instanceof Array?arguments[0]:arguments,angular.forEach(o,function(r){e.hasOwnProperty(r)||(e[r]="")}),i()},this.$get=r}angular.module("cookiesMirror").provider("$cookiesMirror",r)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvb2tpZXMtbWlycm9yLm1vZHVsZS5qcyIsImNvb2tpZXMtbWlycm9yLmludGVyY2VwdG9yLmpzIiwiY29va2llcy1taXJyb3IucHJvdmlkZXIuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvb2tpZXNNaXJyb3JJbnRlcmNlcHRvciIsIiRxIiwiJGNvb2tpZXNNaXJyb3IiLCJyZXF1ZXN0IiwiY29uZmlnIiwiY29va2llcyIsImdldCIsImhlYWRlcnMiLCJ3aGVuIiwicmVxdWVzdEVycm9yIiwicmVqZWN0aW9uIiwicmVqZWN0IiwicmVzcG9uc2UiLCJwYXJzZSIsInJlc3BvbnNlRXJyb3IiLCIkaHR0cFByb3ZpZGVyIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsImNvb2tpZXNNaXJyb3JJbnRlcmNlcHRvckNvbmZpZyIsIiRjb29raWVzTWlycm9yUHJvdmlkZXIiLCIkJGdldCIsInJhdyIsIiQkcmVzdG9yZSIsIiQkcmF3Q29va2llc0hlYWRlciIsImZvckVhY2giLCJjb29raWVWYWx1ZSIsImNvb2tpZU5hbWUiLCIkJHBhcnNlIiwicmF3Q29va2llcyIsIiQkY29va2llVmFsdWVzQXJyYXkiLCJ1bmRlZmluZWQiLCJpbmRleE9mIiwic3BsaXQiLCIkJHNhdmUiLCIkJGxvY2FsU3RvcmFnZUlkZW50aWZpZXIiLCIkJHRyYWNrZWRDb29raWVzIiwic3RvcmFnZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsInRoaXMiLCJ0cmFjayIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkFycmF5IiwiaGFzT3duUHJvcGVydHkiLCIkZ2V0IiwicHJvdmlkZXIiXSwibWFwcGluZ3MiOiJDQUNBLFdBQ0FBLFFBQ0FDLE9BQUEsZ0RDVUEsUUFBQUMsR0FBQUMsRUFBQUMsR0FDQSxPQUNBQyxRQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQUgsRUFBQUksS0FBQSxFQUlBLE9BSEEsS0FBQUQsSUFDQUQsRUFBQUcsUUFBQSxPQUFBRixHQUVBSixFQUFBTyxLQUFBSixJQUVBSyxhQUFBLFNBQUFDLEdBQ0EsTUFBQVQsR0FBQVUsT0FBQUQsSUFFQUUsU0FBQSxTQUFBQSxHQUVBLE1BREFWLEdBQUFXLE1BQUFELEVBQUFMLFFBQUEsZUFDQU4sRUFBQU8sS0FBQUksSUFFQUUsY0FBQSxTQUFBSixHQUNBLE1BQUFULEdBQUFVLE9BQUFELHVDQXRCQUssRUFDQUMsYUFDQUMsS0FBQWpCLCtCQVJBRixRQUNBQyxPQUFBLGlCQUNBSyxPQUFBYyxNQ0pBLFdBTUEsUUFBQUMsS0FvQ0EsUUFBQWpCLEtBTUEsUUFBQWtCLEdBQUFDLEdBRUEsR0FEQUMsSUFDQUQsRUFHQSxDQUNBLEdBQUFFLEdBQUEsRUFRQSxPQU5BekIsU0FBQTBCLFFBQUFuQixFQUFBLFNBQUFvQixFQUFBQyxHQUNBLEtBQUFELElBQ0FGLEdBQUFHLEVBQUEsSUFBQUQsRUFBQSxRQUlBRixFQVhBLE1BQUFsQixHQWVBLFFBQUFzQixHQUFBQyxHQUNBLEdBQUFBLEVBQUEsQ0FDQSxHQUFBQyxHQUFBQyxNQUVBaEMsU0FBQTBCLFFBQUFuQixFQUFBLFNBQUFvQixFQUFBQyxHQUNBRSxFQUFBRyxRQUFBTCxFQUFBLE1BQUEsSUFDQUcsRUFBQUQsRUFBQUksTUFBQU4sRUFBQSxLQUVBRyxFQUFBTCxRQUFBLFNBQUFDLEdBQ0EsSUFBQUEsSUFDQXBCLEVBQUFxQixHQUFBRCxFQUFBTyxNQUFBLEtBQUEsR0FFQTNCLEVBQUFxQixHQUFBSyxRQUFBLFlBQUEsSUFDQTFCLEVBQUFxQixHQUFBLE9BS0FHLEVBQUFDLFVBSUFHLEtBN0NBLE9BQ0EzQixJQUFBYyxFQUNBUCxNQUFBYyxHQXRDQSxHQUFBTyxHQUFBLGdCQUNBQyxLQUNBOUIsS0FFQWlCLEVBQUEsV0FDQSxHQUFBYyxHQUFBQyxPQUFBQyxhQUFBQyxRQUFBTCxJQUFBLElBQ0E3QixHQUFBbUMsS0FBQTNCLE1BQUF1QixJQUdBSCxFQUFBLFdBQ0FJLE9BQUFDLGFBQUFHLFFBQUFQLEVBQUFNLEtBQUFFLFVBQUFyQyxJQUdBc0MsTUFBQUMsTUFBQSxXQUNBdEIsSUFHQWEsRUFEQSxJQUFBVSxVQUFBQyxRQUFBRCxVQUFBLFlBQUFFLE9BQ0FGLFVBQUEsR0FHQUEsVUFHQS9DLFFBQUEwQixRQUFBVyxFQUFBLFNBQUFULEdBQ0FyQixFQUFBMkMsZUFBQXRCLEtBQ0FyQixFQUFBcUIsR0FBQSxNQUlBTyxLQUdBVSxLQUFBTSxLQUFBL0MsRUF0Q0FKLFFBQ0FDLE9BQUEsaUJBQ0FtRCxTQUFBLGlCQUFBL0IiLCJmaWxlIjoiYW5ndWxhci1jb29raWVzLW1pcnJvci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIGFuZ3VsYXIgKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjb29raWVzTWlycm9yJywgW10pO1xufSkoKTsiLCIvKiBnbG9iYWxzIGFuZ3VsYXIgKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjb29raWVzTWlycm9yJylcbiAgICAgICAgLmNvbmZpZyhjb29raWVzTWlycm9ySW50ZXJjZXB0b3JDb25maWcpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29va2llc01pcnJvckludGVyY2VwdG9yQ29uZmlnKCRodHRwUHJvdmlkZXIpIHtcbiAgICAgICAgJGh0dHBQcm92aWRlclxuICAgICAgICAgICAgLmludGVyY2VwdG9yc1xuICAgICAgICAgICAgLnB1c2goY29va2llc01pcnJvckludGVyY2VwdG9yKTtcblxuICAgICAgICAvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgZnVuY3Rpb24gY29va2llc01pcnJvckludGVyY2VwdG9yKCRxLCAkY29va2llc01pcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAncmVxdWVzdCc6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvb2tpZXMgPSAkY29va2llc01pcnJvci5nZXQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNvb2tpZXMgIT09ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWydDb29raWUnXSA9IGNvb2tpZXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLndoZW4oY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdyZXF1ZXN0RXJyb3InOiBmdW5jdGlvbiAocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAkY29va2llc01pcnJvci5wYXJzZShyZXNwb25zZS5oZWFkZXJzKCdzZXQtY29va2llJykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEud2hlbihyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uIChyZWplY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjb29raWVzTWlycm9yJylcbiAgICAgICAgLnByb3ZpZGVyKCckY29va2llc01pcnJvcicsICRjb29raWVzTWlycm9yUHJvdmlkZXIpO1xuXG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gJGNvb2tpZXNNaXJyb3JQcm92aWRlcigpIHtcbiAgICAgICAgdmFyICQkbG9jYWxTdG9yYWdlSWRlbnRpZmllciA9ICdjb29raWVzTWlycm9yJztcbiAgICAgICAgdmFyICQkdHJhY2tlZENvb2tpZXMgPSBbXTtcbiAgICAgICAgdmFyIGNvb2tpZXMgPSB7fTtcblxuICAgICAgICB2YXIgJCRyZXN0b3JlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJCRsb2NhbFN0b3JhZ2VJZGVudGlmaWVyKSB8fCAne30nO1xuICAgICAgICAgICAgY29va2llcyA9IEpTT04ucGFyc2Uoc3RvcmFnZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyICQkc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgkJGxvY2FsU3RvcmFnZUlkZW50aWZpZXIsIEpTT04uc3RyaW5naWZ5KGNvb2tpZXMpKVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudHJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkJHJlc3RvcmUoKTtcblxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAkJHRyYWNrZWRDb29raWVzID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgJCR0cmFja2VkQ29va2llcyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCQkdHJhY2tlZENvb2tpZXMsIGZ1bmN0aW9uIChjb29raWVOYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb29raWVzLmhhc093blByb3BlcnR5KGNvb2tpZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb2tpZXNbY29va2llTmFtZV0gPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCRzYXZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy4kZ2V0ID0gJGNvb2tpZXNNaXJyb3I7XG5cbiAgICAgICAgLyogQG5nSW5qZWN0ICovXG4gICAgICAgIGZ1bmN0aW9uICRjb29raWVzTWlycm9yKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXQ6ICQkZ2V0LFxuICAgICAgICAgICAgICAgIHBhcnNlOiAkJHBhcnNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiAkJGdldChyYXcpIHtcbiAgICAgICAgICAgICAgICAkJHJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICBpZighcmF3KXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvb2tpZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIHZhciAkJHJhd0Nvb2tpZXNIZWFkZXIgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29va2llcywgZnVuY3Rpb24oY29va2llVmFsdWUsIGNvb2tpZU5hbWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29va2llVmFsdWUgIT09ICcnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJHJhd0Nvb2tpZXNIZWFkZXIgKz0gKGNvb2tpZU5hbWUgKyAnPScgKyBjb29raWVWYWx1ZSArICc7ICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCRyYXdDb29raWVzSGVhZGVyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiAkJHBhcnNlKHJhd0Nvb2tpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocmF3Q29va2llcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJCRjb29raWVWYWx1ZXNBcnJheSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29va2llcywgZnVuY3Rpb24gKGNvb2tpZVZhbHVlLCBjb29raWVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3Q29va2llcy5pbmRleE9mKGNvb2tpZU5hbWUgKyAnPScpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJGNvb2tpZVZhbHVlc0FycmF5ID0gcmF3Q29va2llcy5zcGxpdChjb29raWVOYW1lICsgJz0nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQkY29va2llVmFsdWVzQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoY29va2llVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb2tpZVZhbHVlICE9ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVzW2Nvb2tpZU5hbWVdID0gY29va2llVmFsdWUuc3BsaXQoJzsnKVswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29va2llc1tjb29raWVOYW1lXS5pbmRleE9mKCdkZWxldGVkJykgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llc1tjb29raWVOYW1lXSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkJGNvb2tpZVZhbHVlc0FycmF5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkJHNhdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59KSgpO1xuIl19
